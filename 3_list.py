# Список l1 задается в квадратных скобках
l1 = [1, 3.5, 'текст', [1, 2, 3], 3.5]
print(l1)

# Через метод list можно заполнять список
l2 = list('text')
# В данном списке будет 4 элемента, каждая буква - отдельный элемент

# Над списками может использоваться конкатенация, списки можно умножать на целое число, больше нуля
# Из списка можно брать количество необходимое элементов l1(0:2). Верхняя граница не включается

# Вывод каждого второго элемента
print(l1[::2])

# Есть ли элемент (в данном случае 1) в списке. В результате True или false
print(1 in l1)

# Элементы в списке можно суммировать, искать минимальное и максимальное
l3 = [1,2,4,7,-20,3]
print(sum(l3), min(l3), max(l3))

# ИНДЕКСЫ. Верни индекс у значения 3.5. Если несколько таких элементов, то индекс первого вхождения
# Если вводим не сущесвтующее значение, то будет ошибка
print(l1.index(3.5))

# Сколько элементов в списке. Если значения нет, будет 0 значений в списке
print(l1.count(3.5))

# Очистка списка от всех элементов
l1.clear()

# Удаление значений из списка. Если значений несколько, то удаляет только первое попавшееся
l1 = [1, 3.5, 'текст', [1, 2, 3], 3.5]
l1.remove(3.5)
print(l1)

# Также есть метод pop. Метод удаляет по индексу и возвращает значение удаленного элемента
l1 = [1, 3.5, 'текст', [1, 2, 3], 3.5]
l1.pop(1)

# del
a = [1,2,3,4,5,6]
del a[1:3]
print(a)

# Вставка значений в список. На позицию 2 вставь элемент 'abc'
a.insert(2, 'abc')

# Добавление элемента в конце списка - метод append (добавит 1 элемент). Это будет вложенный список
a.append([1,2,3])
print(a)
# Добавление нескольких элементов в конец списка - метод extend (в данном случае добавит 3 отдельных элемента)
a.extend([1,2,3])
print(a)

# Чтобы собрать из списка строку (после сплита) вначале указывается разделитель,
# затем через точку метод join, который принимает в себя список

# Сортировка
b1 = [1,2,3,4,5,-4,0]
b2 = [1,2,3,4,5,-4,0]
new_b1 = sorted(b1)
new_b2 = b2.sort()
print(new_b1, b1) # Возвращаются отсортированные значения, но исходный список не меняется!!!
print(new_b2, b2) # Меняет текущий список, но ничего не вовзращает по выполнению метода

# Можно сразу перевернуть список
new_b1 = sorted(b1, reverse = True)
new_b2 = b2.sort(reverse = True)

# Можно использовать свой ключ для сортировки
b3 = [144,23452345,34,4,5,-4,0]
new_b3 = sorted(b3, key = len)
print(new_b3)


### КОРТЕЖИ - неизменяемые списки. Обозначаются круглыми скобками. Class 'tuple' ###
# Если хотим кортеж из одного элемента, то
a = (1,)

### GIT ###
# Открываем папку, где наш проект,
# Запускаем из нее терминал
# Пишем в нем git
# git status - показывает за чем следит гит
# Перед доброской git commit -m "комментарий к доброске", где -m - message
git commit -m "new task. test git"

# После создания нового репозитория на гит хабе нужно связать наш локальный репозиторий с внешним
git remote add origin https://github.com/da-vinogradova/autotest_course.git

# Заливаем изменения из локального репозитория
git push -u origin master



# Чтобы авторизоваться в гитхабе
gh auth login